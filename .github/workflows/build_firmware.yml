name: Build Firmware

on: [push, pull_request]

jobs:
  build-firmware:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Install dependencies
      run: |
        sudo apt-get install arduino-mk
    - name: Build
      run: |
        ./build.sh
        ls build
    - name: Archive Build
      uses: actions/upload-artifact@v3
      with:
        name: ${{format('{0}-{1}',github.sha,github.run_number)}}
        path: build/*.hex

  build-release:
    if:  ${{ (github.event_name == 'push') && (github.ref_type == 'tag') && (startsWith(github.ref_name, 'v') || startsWith(github.ref_name, 'test')) }}
    needs: build-firmware
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Set variables
      id: vars
      run: |
        echo "sha-short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "tag=$(git describe --tags)" >> $GITHUB_OUTPUT
        echo "draft=$(git describe --tags | sed -e 's/^test.*/true/;s/^v.*/false/')" >> $GITHUB_OUTPUT
    - name: Create release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.vars.outputs.tag }}
        name: Release ${{ steps.vars.outputs.tag }}
        commit: ${{ steps.vars.outputs.sha }}
        body: ""  # release message, alternative to body_path
        # body_path: release_text.md  # uncomment if not used
        draft: ${{ steps.vars.outputs.draft }}
        prerelease: false
        allowUpdates: true
        replacesArtifacts: false
    - name: Upload asset
      uses: actions/upload-artifact@v3
      with:
        name: AYAB-firmware-${{ steps.vars.outputs.tag }}
        path: build/*.hex
