test/test_encoders.cpp:    encoders->init(Machine_t::Kh910);
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:      .WillOnce(Return(FILTER_L_MIN[static_cast<int8_t>(encoders->getMachineType())]));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getDirection(), Direction_t::Right);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), 0x01);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getCarriage(), Carriage_t::NoCarriage);
test/test_encoders.cpp:      .WillOnce(Return(FILTER_R_MIN[static_cast<int8_t>(encoders->getMachineType())] - 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getDirection(), Direction_t::Right);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), END_RIGHT_MINUS_OFFSET[static_cast<int8_t>(encoders->getMachineType())]);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getCarriage(), Carriage_t::Knit);
test/test_encoders.cpp:      .WillOnce(Return(FILTER_L_MAX[static_cast<int8_t>(encoders->getMachineType())] + 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getDirection(), Direction_t::Right);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), END_LEFT_PLUS_OFFSET[static_cast<int8_t>(encoders->getMachineType())]);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getCarriage(), Carriage_t::Knit);
test/test_encoders.cpp:  ASSERT_FALSE(encoders->getMachineType() == Machine_t::Kh270);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getCarriage(), Carriage_t::NoCarriage);
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:      .WillOnce(Return(FILTER_L_MIN[static_cast<int8_t>(encoders->getMachineType())] - 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getDirection(), Direction_t::Right);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getHallActive(), Direction_t::Left);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), END_LEFT_PLUS_OFFSET[static_cast<int8_t>(encoders->getMachineType())]);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getCarriage(), Carriage_t::Lace);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getBeltShift(), BeltShift::Regular);
test/test_encoders.cpp:      .WillOnce(Return(FILTER_R_MIN[static_cast<int8_t>(encoders->getMachineType())]));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  encoders->m_position = 0;
test/test_encoders.cpp:      .WillOnce(Return(FILTER_L_MAX[static_cast<int8_t>(encoders->getMachineType())] + 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getDirection(), Direction_t::Right);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), END_LEFT_PLUS_OFFSET[static_cast<int8_t>(encoders->getMachineType())]);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getCarriage(), Carriage_t::Knit);
test/test_encoders.cpp:  encoders->init(Machine_t::Kh270);
test/test_encoders.cpp:  ASSERT_TRUE(encoders->getMachineType() == Machine_t::Kh270);
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getDirection(), Direction_t::Right);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getHallActive(), Direction_t::Left);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), END_LEFT_PLUS_OFFSET[static_cast<int8_t>(Machine_t::Kh270)]);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getCarriage(), Carriage_t::Knit);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getBeltShift(), BeltShift::Regular);
test/test_encoders.cpp:      .WillOnce(Return(FILTER_R_MIN[static_cast<int8_t>(encoders->getMachineType())]));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  encoders->init(Machine_t::Kh270);
test/test_encoders.cpp:  ASSERT_TRUE(encoders->getMachineType() == Machine_t::Kh270);
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:      .WillOnce(Return(FILTER_L_MAX[static_cast<int8_t>(encoders->getMachineType())] + 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getDirection(), Direction_t::Right);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getHallActive(), Direction_t::Left);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), END_LEFT_PLUS_OFFSET[static_cast<int8_t>(Machine_t::Kh270)] + MAGNET_DISTANCE_270);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getCarriage(), Carriage_t::Knit);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getBeltShift(), BeltShift::Regular);
test/test_encoders.cpp:      .WillOnce(Return(FILTER_L_MAX[static_cast<int8_t>(encoders->getMachineType())] + 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getCarriage(), Carriage_t::Knit);
test/test_encoders.cpp:      .WillOnce(Return(FILTER_R_MAX[static_cast<int8_t>(encoders->getMachineType())] + 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:      .WillOnce(Return(FILTER_L_MIN[static_cast<int8_t>(encoders->getMachineType())] - 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getCarriage(), Carriage_t::Garter);
test/test_encoders.cpp:      .WillOnce(Return(FILTER_R_MIN[static_cast<int8_t>(encoders->getMachineType())]));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:      .WillOnce(Return(FILTER_R_MIN[static_cast<int8_t>(encoders->getMachineType())] - 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:      .WillOnce(Return(FILTER_L_MIN[static_cast<int8_t>(encoders->getMachineType())]));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  encoders->m_position = END_LEFT[static_cast<uint8_t>(encoders->getMachineType())] + 1;
test/test_encoders.cpp:      .WillOnce(Return(FILTER_R_MIN[static_cast<int8_t>(encoders->getMachineType())]));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:      .WillOnce(Return(FILTER_L_MIN[static_cast<int8_t>(encoders->getMachineType())]));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:      .WillOnce(Return(FILTER_R_MAX[static_cast<int8_t>(encoders->getMachineType())] + 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getDirection(), Direction_t::Right);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getHallActive(), Direction_t::Right);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), END_RIGHT_MINUS_OFFSET[static_cast<int8_t>(encoders->getMachineType())]);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getCarriage(), Carriage_t::NoCarriage);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getBeltShift(), BeltShift::Shifted);
test/test_encoders.cpp:      .WillOnce(Return(FILTER_L_MAX[static_cast<int8_t>(encoders->getMachineType())]));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:      .WillOnce(Return(FILTER_R_MAX[static_cast<int8_t>(encoders->getMachineType())] + 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), END_RIGHT_MINUS_OFFSET[static_cast<int8_t>(encoders->getMachineType())]);
test/test_encoders.cpp:  uint16_t pos = END_RIGHT_MINUS_OFFSET[static_cast<int8_t>(encoders->getMachineType())];
test/test_encoders.cpp:  while (pos < END_RIGHT[static_cast<int8_t>(encoders->getMachineType())]) {
test/test_encoders.cpp:        .WillOnce(Return(FILTER_L_MAX[static_cast<int8_t>(encoders->getMachineType())]));
test/test_encoders.cpp:    encoders->isr();
test/test_encoders.cpp:    ASSERT_EQ(encoders->getPosition(), ++pos);
test/test_encoders.cpp:        .WillOnce(Return(FILTER_R_MAX[static_cast<int8_t>(encoders->getMachineType())]));
test/test_encoders.cpp:    encoders->isr();
test/test_encoders.cpp:    ASSERT_EQ(encoders->getPosition(), pos);
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), pos);
test/test_encoders.cpp:      .WillOnce(Return(FILTER_L_MAX[static_cast<int8_t>(encoders->getMachineType())]));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), pos);
test/test_encoders.cpp:  ASSERT_TRUE(encoders->getMachineType() == Machine_t::Kh910);
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:      .WillOnce(Return(FILTER_R_MIN[static_cast<int8_t>(encoders->getMachineType())] - 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getCarriage(), Carriage_t::Knit);
test/test_encoders.cpp:      .WillOnce(Return(FILTER_R_MAX[static_cast<int8_t>(encoders->getMachineType())] + 1));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), END_LEFT_PLUS_OFFSET[static_cast<int8_t>(encoders->getMachineType())]);
test/test_encoders.cpp:      .WillOnce(Return(FILTER_R_MAX[static_cast<int8_t>(encoders->getMachineType())]));
test/test_encoders.cpp:  encoders->isr();
test/test_encoders.cpp:  ASSERT_EQ(encoders->getPosition(), END_LEFT_PLUS_OFFSET[static_cast<int8_t>(encoders->getMachineType())]);
test/test_encoders.cpp:  uint8_t p = encoders->getPosition();
test/test_encoders.cpp:  BeltShift_t b = encoders->getBeltShift();
test/test_encoders.cpp:  Direction_t d = encoders->getDirection();
test/test_encoders.cpp:  Direction_t d = encoders->getHallActive();
test/test_encoders.cpp:  Carriage_t c = encoders->getCarriage();
test/test_encoders.cpp:  Machine_t m = encoders->getMachineType();
test/test_encoders.cpp:  encoders->init(Machine_t::Kh270);
test/test_encoders.cpp:  Machine_t m = encoders->getMachineType();
test/test_encoders.cpp:  uint16_t v = encoders->getHallValue(Direction_t::NoDirection);
test/test_encoders.cpp:  v = encoders->getHallValue(Direction_t::Left);
test/test_encoders.cpp:  v = encoders->getHallValue(Direction_t::Right);
test/test_encoders.cpp:  v = encoders->getHallValue(Direction_t::Right);
